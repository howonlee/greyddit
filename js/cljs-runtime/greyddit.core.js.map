{"version":3,"sources":["greyddit/core.cljs"],"mappings":"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","names":["js/greyddit","js/greyddit.core","js/greyddit.core.state","greyddit.core/state","reagent.core.atom","js/greyddit.core.subreddits","greyddit.core/subreddits","greyddit.core/mobile-button-style","var_args","G__19505","greyddit.core/delay-transition","js/Error","transition-fn","greyddit.core.delay_transition","preload-fn","delay-ms","cljs.core/rand-int","cljs.core.swap_BANG_","cljs.core/assoc","js/setTimeout","greyddit.core/fetch-json","url","on-success","on-error","js/window","res","err","js/console.error","greyddit.core/render-markdown","md","js/module$node_modules$marked$lib$marked_cjs","greyddit.core/build-reddit-url","subreddit","after","greyddit.core/handle-reddit-response","response","push-history?","clj-data","cljs.core.js__GT_clj","posts","cljs.core.get_in","new-after","greyddit.core/build-comments-url","id","greyddit.core/fetch-comments","vec__19506","cljs.core.nth","post","comments","_","G__19511","greyddit.core/fetch-reddit-posts","greyddit.core.fetch_reddit_posts","p1__19509#","greyddit.core/decode-url","s","clojure.string/replace","greyddit.core/reddit-image-url","preview-url","G__19512","direct-url","G__19513","and__5000__auto__","cljs.core/re-matches","greyddit.core/reddit-video-url","temp__5804__auto__","greyddit.core/reddit-gif-url","greyddit.core/is-youtube-url?","cljs.core/re-find","greyddit.core/gallery-images","media-data","cljs.core.get","ids","cljs.core.keep","p__19514","map__19515","cljs.core/--destructure-map","media_id","G__19516","G__19518","greyddit.core/flatten-comments","greyddit.core.flatten_comments","parent-map","cljs.core.reduce","p__19519","map__19520","acc","data","full-comment","parent-id","flattened","cljs.core.conj","reply-children","cljs.core/map?","cljs.core/seq","cljs.core.into","cljs.core.assoc","or__5002__auto__","greyddit.core/post-page","map__19522","cljs.core/deref","selected-post","video-url","image-url","gif-url","gallery","cljs.core/not","cljs.core/last","clojure.string.split","iter__5480__auto__","s__19524","cljs.core/LazySeq","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__19526","cljs.core/chunk-buffer","i__19525","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__19523","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","img-url","p1__19521#","cljs.core.merge","flat-comments","s__19528","b__19530","i__19529","map__19531","iter__19527","map__19532","comment","parent","greyddit.core/post-table","s__19535","b__19537","i__19536","map__19538","p1__19533#","iter__19534","map__19539","greyddit.core/home-page","s__19541","b__19543","i__19542","iter__19540","greyddit.core/subreddit-page","map__19544","error","greyddit.core/app","map__19545","view","loading?","G__19546","cljs.core/Keyword","greyddit.core/start","root","js/module$node_modules$react_dom$client.createRoot","js/document","reagent.core.as_element","greyddit.core/init","cljs.core/chunk-first"],"sourcesContent":["(ns greyddit.core\n  (:require\n    [\"marked\" :as marked]\n    [reagent.core :as r]\n    [\"react-dom/client\" :as rdom-client]))\n\n(defonce state (r/atom {:view :home\n                        :subreddit nil\n                        :posts []\n                        :after nil\n                        :selected-post nil\n                        :comments []\n                        :error nil\n                        :loading? false}))\n\n(defonce subreddits [\"askculinary\"\n                     \"askhistorians\"\n                     \"askscience\"\n                     \"clojure\"\n                     \"comics\"\n                     \"credibledefense\"\n                     \"curatedtumblr\"\n                     \"experienceddevs\"\n                     \"hobbydrama\"\n                     \"noncredibledefense\"\n                     \"personalfinance\"\n                     \"stardewvalley\"\n                     \"subredditdrama\"\n                     \"totalwar\"\n                     \"warcollege\"])\n\n(def mobile-button-style\n  {:padding \"1rem\"\n   :fontSize \"1.25rem\"\n   :borderRadius \"6px\"\n   :cursor \"pointer\"\n   :border \"1px solid #ccc\"\n   :background \"#f0f0f0\"\n   :textAlign \"left\"})\n\n(defn delay-transition\n  ([transition-fn]\n   (delay-transition nil transition-fn))\n  ([preload-fn transition-fn]\n   (let [delay-ms (+ 1000 (rand-int 6000))] ;; 1s to 7s\n     (swap! state assoc :loading? true)\n     (when preload-fn (preload-fn)) ;; start preload immediately\n     (js/setTimeout\n      (fn []\n        (swap! state assoc :loading? false)\n        (transition-fn))\n      delay-ms))))\n\n(defn fetch-json [url on-success on-error]\n  (-> (.fetch js/window url)\n      (.then (fn [res]\n               (if (.-ok res)\n                 (.json res)\n                 (throw (js/Error. \"Fetch failed\")))))\n      (.then on-success)\n      (.catch (fn [err]\n                (js/console.error err)\n                (on-error err)))))\n\n(defn render-markdown [md]\n  {:dangerouslySetInnerHTML\n   {:__html (.parse marked md)}})\n\n;; ====\n;; Handling subreddit listings\n;; ====\n\n(defn build-reddit-url [subreddit after]\n  (str \"https://www.reddit.com/r/\" subreddit \"/top.json?limit=20&t=week\"\n       (when after (str \"&after=\" after))))\n\n(defn handle-reddit-response [response push-history?]\n  (let [clj-data (js->clj response :keywordize-keys true)\n        posts (get-in clj-data [:data :children])\n        new-after (get-in clj-data [:data :after])]\n    (swap! state assoc\n           :posts posts\n           :after new-after\n           :error nil)))\n\n\n;; ===\n;; Handling comment listings\n;; ===\n\n(defn build-comments-url [subreddit id]\n  (str \"https://www.reddit.com/r/\" subreddit \"/comments/\" id \".json\"))\n\n(defn fetch-comments [subreddit id]\n  (let [url (build-comments-url subreddit id)]\n    (fetch-json url\n                (fn [response]\n                  (let [[post comments] (js->clj response :keywordize-keys true)]\n                    (swap! state assoc\n                           :selected-post (get-in post [:data :children 0 :data])\n                           :comments (get-in comments [:data :children])\n                           :view :post)))\n                (fn [_]\n                  (swap! state assoc :error \"Failed to load post or CORS error\")))))\n\n\n(defn fetch-reddit-posts\n  ([subreddit]\n   (fetch-reddit-posts subreddit nil false))\n  ([subreddit after push-history?]\n   (swap! state assoc :subreddit subreddit)\n   (let [url (build-reddit-url subreddit after)]\n     (fetch-json url\n                 #(handle-reddit-response % push-history?)\n                 (fn [_]\n                   (swap! state assoc :error \"Failed to load or CORS error\"))))))\n\n;; ===\n;; Dealing with posts\n;; ===\n\n(defn decode-url [s]\n  (clojure.string/replace s #\"&amp;\" \"&\"))\n\n(defn reddit-image-url [post]\n  (let [preview-url (some-> (get-in post [:preview :images 0 :source :url]) decode-url)\n        direct-url  (some-> (:url post) decode-url)]\n    (cond\n      preview-url preview-url\n      ;; Use direct URL for NSFW if it's an image\n      (and (:over_18 post)\n           (re-matches #\"(?i).*\\.(jpg|jpeg|png|gif)$\" direct-url))\n      direct-url)))\n\n(defn reddit-video-url [post]\n  (when-let [url (get-in post [:media :reddit_video :fallback_url])]\n    (decode-url url)))\n\n(defn reddit-gif-url [post]\n  (when-let [url (get-in post [:media :reddit_video :fallback_url])]\n    (decode-url url)))\n\n(defn is-youtube-url? [url]\n  (re-find #\"(?i)youtube\\.com|youtu\\.be\" url))\n\n(defn gallery-images [post]\n  (let [media-data (get post :media_metadata)\n        ids (get-in post [:gallery_data :items])]\n    (keep (fn [{:keys [media_id]}]\n            (some-> (get-in media-data [media_id :s :u]) decode-url))\n          ids)))\n\n(defn flatten-comments\n  ([comments]\n   (flatten-comments comments nil))\n  ([comments parent-map]\n   (reduce\n    (fn [acc {:keys [data] :as full-comment}]\n      (let [id (:id data)\n            parent-id (:parent_id data)\n            flattened (conj acc {:comment data :parent (get parent-map parent-id)})\n            reply-children (when (map? (:replies data))\n                             (get-in data [:replies :data :children]))]\n        (if (seq reply-children)\n          (into flattened (flatten-comments reply-children (assoc parent-map (str \"t1_\" id) data)))\n          flattened)))\n    []\n    (or comments []))))\n\n\n(defn post-page []\n  (let [{:keys [selected-post comments]} @state\n        url (:url selected-post)\n        video-url (reddit-video-url selected-post)\n        image-url (reddit-image-url selected-post)\n        gif-url (when (and video-url (re-find #\"\\.gif\" url)) video-url)\n        gallery (gallery-images selected-post)]\n    [:div {:style {:padding \"2rem\"}}\n     [:button {:on-click #(swap! state assoc :view :subreddit :comments [] :selected-post nil)\n               :style mobile-button-style}\n      \"\u2190 Back to Subreddit\"]\n\n     (when selected-post\n       [:div\n        [:h2 (:title selected-post)]\n        [:p \"by \" [:b (:author selected-post)]]\n\n        ;; Reddit video\n        (when (and video-url (not gif-url))\n          [:video {:controls true :style {:max-width \"100%\" :margin \"1rem 0\"}}\n           [:source {:src video-url :type \"video/mp4\"}]])\n\n        ;; GIF (Reddit-hosted)\n        (when gif-url\n          [:video {:autoplay true :loop true :muted true\n                   :style {:max-width \"100%\" :margin \"1rem 0\"}}\n           [:source {:src gif-url :type \"video/mp4\"}]])\n\n        ;; YouTube embed\n        (when (is-youtube-url? url)\n          [:iframe {:width \"100%\" :height \"400\"\n                    :src (str \"https://www.youtube.com/embed/\"\n                              (last (clojure.string/split url #\"[=/]\")))\n                    :frameBorder \"0\" :allow \"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n                    :allowFullScreen true\n                    :style {:margin \"1rem 0\"}}])\n\n        ;; Gallery (Reddit image gallery)\n        (when (seq gallery)\n          [:div {:style {:display \"flex\" :gap \"1rem\" :overflow \"auto\" :margin \"1rem 0\"}}\n           (for [img-url gallery]\n             ^{:key img-url}\n             [:img {:src img-url\n                    :style {:max-height \"300px\" :border \"1px solid #ccc\"}}])])\n\n        ;; Static image fallback\n        (when (and image-url\n                   (not video-url)\n                   (not (is-youtube-url? url))\n                   (re-matches #\"(?i).*\\.(jpg|jpeg|png|gif)$\" image-url))\n          [:img {:src image-url\n                 :style {:max-width \"100%\" :margin \"1rem 0\" :border \"1px solid #ccc\"}\n                 :on-error #(set! (.-display (.-style (.-target %))) \"none\")}])\n\n\n        ;; Self-text\n        (when (:selftext selected-post)\n          [:div (merge {:style {:marginTop \"0.5rem\"\n                                :background \"#f9f9f9\"\n                                :padding \"0.5rem\"\n                                :borderRadius \"4px\"}}\n                       (render-markdown (:selftext selected-post)))])\n\n        ;; Comments\n        [:h3 \"Comments\"]\n        (let [flat-comments (flatten-comments (or comments []))]\n          (if (seq flat-comments)\n            [:div\n             (for [{:keys [comment parent]} flat-comments\n                   :when (not (:stickied comment))]\n               ^{:key (:id comment)}\n               [:div {:style {:marginBottom \"2rem\"}}\n                (when parent\n                  [:div {:style {:background \"#eee\"\n                                 :padding \"0.5rem\"\n                                 :marginBottom \"0.5rem\"\n                                 :borderRadius \"4px\"\n                                 :fontStyle \"italic\"}}\n                   [:p [:b (:author parent)] \":\"]\n                   [:div (render-markdown (:body parent))]])\n\n                  [:div {:style {:background \"#f9f9f9\"\n                                 :padding \"0.75rem\"\n                                 :borderRadius \"4px\"\n                                 :border \"1px solid #ddd\"}}\n                   [:p [:b (:author comment)] \":\"]\n                   [:div (when (:body comment) (render-markdown (:body comment)))]]])]\n            [:p \"No comments or failed to load.\"]))])]))\n\n(defn post-table [posts]\n  [:div {:style {:overflowX \"auto\" :maxWidth \"100%\"}}\n   [:table {:style {:borderCollapse \"collapse\"\n                    :width \"100%\"\n                    :minWidth \"500px\"}} ;; keeps layout readable on large screens\n    [:thead\n     [:tr\n      [:th {:style {:textAlign \"left\" :padding \"0.5rem\" :borderBottom \"1px solid #ccc\"}} \"Title\"]\n      [:th {:style {:textAlign \"left\" :padding \"0.5rem\" :borderBottom \"1px solid #ccc\"}} \"Author\"]\n      [:th {:style {:textAlign \"left\" :padding \"0.5rem\" :borderBottom \"1px solid #ccc\"}} \"Upvotes\"]]]\n    [:tbody\n     (for [{:keys [data]} posts]\n       ^{:key (:id data)}\n       [:tr\n        [:td {:style {:padding \"1.5rem\" :borderBottom \"1px solid #eee\"}}\n         [:a {:href \"#\"\n              :on-click #(do\n                           (.preventDefault %)\n                           (delay-transition\n                             (fn [] (fetch-comments (:subreddit @state) (:id data))) ;; preload\n                             (fn [] (swap! state assoc :view :post))))}\n          (:title data)]]\n        [:td {:style {:padding \"0.5rem\" :borderBottom \"1px solid #eee\"}} (:author data)]\n        [:td {:style {:padding \"0.5rem\" :borderBottom \"1px solid #eee\"}} (:ups data)]])]]])\n\n\n(defn home-page []\n  [:div {:style {:padding \"2rem\"}}\n   [:h1 \"Welcome to Greyddit\"]\n   [:p \"Select a subreddit:\"]\n\n   [:div {:style {:display \"flex\"\n                  :flexDirection \"column\"\n                  :gap \"1rem\"\n                  :marginTop \"1rem\"}}\n    (for [s subreddits]\n      ^{:key s}\n      [:button\n       {:on-click #(delay-transition\n                     (fn [] (fetch-reddit-posts s)) ;; preload\n                     (fn [] (swap! state assoc :view :subreddit :subreddit s)))\n        :style mobile-button-style}\n       (str \"r/\" s)])]])\n\n(defn subreddit-page []\n  (let [{:keys [subreddit posts error after]} @state]\n    [:div {:style {:padding \"2rem\"}}\n     [:h1 (str \"Top r/\" subreddit \" Posts\")]\n     [:div {:style {:display \"flex\"\n                    :flexWrap \"wrap\"\n                    :gap \"0.5rem\"\n                    :marginBottom \"1rem\"}}\n      [:button\n       {:on-click #(delay-transition nil (fn [] (swap! state assoc :view :home)))\n        :style mobile-button-style}\n       \"\u2190 Back to Home\"]\n\n      (when after\n        [:button {:on-click #(fetch-reddit-posts subreddit after false)\n                  :style mobile-button-style}\n         \"Next Page \u2192\"])]\n     (when error\n       [:p {:style {:color \"red\"}} error])\n     (when (seq posts)\n       [post-table posts])]))\n\n(defn app []\n  (let [{:keys [view loading?]} @state]\n    (if loading?\n      [:div {:style {:padding \"2rem\"}}\n       [:h2 \"Loading...\"]\n       [:div {:style {:width \"3rem\"\n                      :height \"3rem\"\n                      :border \"4px solid #ccc\"\n                      :borderTop \"4px solid #333\"\n                      :borderRadius \"50%\"\n                      :animation \"spin 1s linear infinite\"}}]]\n      (case view\n        :home [home-page]\n        :subreddit [subreddit-page]\n        :post [post-page]\n        [:div \"Unknown view\"]))))\n\n(defn ^:dev/after-load start []\n  (let [root (rdom-client/createRoot (.getElementById js/document \"app\"))]\n    (.render root (r/as-element [app]))))\n\n(defn ^:export init []\n  (start))\n"]}