{
"version":3,
"file":"module$node_modules$marked$lib$marked_cjs.js",
"lineCount":1270,
"mappings":"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",
"sources":["node_modules/marked/lib/marked.cjs"],
"sourcesContent":["shadow$provide[\"module$node_modules$marked$lib$marked_cjs\"] = function(global,require,module,exports) {\n/**\n * marked v15.0.10 - a markdown parser\n * Copyright (c) 2011-2025, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\n'use strict';\n\n/**\n * Gets the original marked default options.\n */\nfunction _getDefaults() {\n    return {\n        async: false,\n        breaks: false,\n        extensions: null,\n        gfm: true,\n        hooks: null,\n        pedantic: false,\n        renderer: null,\n        silent: false,\n        tokenizer: null,\n        walkTokens: null,\n    };\n}\nexports.defaults = _getDefaults();\nfunction changeDefaults(newDefaults) {\n    exports.defaults = newDefaults;\n}\n\nconst noopTest = { exec: () => null };\nfunction edit(regex, opt = '') {\n    let source = typeof regex === 'string' ? regex : regex.source;\n    const obj = {\n        replace: (name, val) => {\n            let valSource = typeof val === 'string' ? val : val.source;\n            valSource = valSource.replace(other.caret, '$1');\n            source = source.replace(name, valSource);\n            return obj;\n        },\n        getRegex: () => {\n            return new RegExp(source, opt);\n        },\n    };\n    return obj;\n}\nconst other = {\n    codeRemoveIndent: /^(?: {1,4}| {0,3}\\t)/gm,\n    outputLinkReplace: /\\\\([\\[\\]])/g,\n    indentCodeCompensation: /^(\\s+)(?:```)/,\n    beginningSpace: /^\\s+/,\n    endingHash: /#$/,\n    startingSpaceChar: /^ /,\n    endingSpaceChar: / $/,\n    nonSpaceChar: /[^ ]/,\n    newLineCharGlobal: /\\n/g,\n    tabCharGlobal: /\\t/g,\n    multipleSpaceGlobal: /\\s+/g,\n    blankLine: /^[ \\t]*$/,\n    doubleBlankLine: /\\n[ \\t]*\\n[ \\t]*$/,\n    blockquoteStart: /^ {0,3}>/,\n    blockquoteSetextReplace: /\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g,\n    blockquoteSetextReplace2: /^ {0,3}>[ \\t]?/gm,\n    listReplaceTabs: /^\\t+/,\n    listReplaceNesting: /^ {1,4}(?=( {4})*[^ ])/g,\n    listIsTask: /^\\[[ xX]\\] /,\n    listReplaceTask: /^\\[[ xX]\\] +/,\n    anyLine: /\\n.*\\n/,\n    hrefBrackets: /^<(.*)>$/,\n    tableDelimiter: /[:|]/,\n    tableAlignChars: /^\\||\\| *$/g,\n    tableRowBlankLine: /\\n[ \\t]*$/,\n    tableAlignRight: /^ *-+: *$/,\n    tableAlignCenter: /^ *:-+: *$/,\n    tableAlignLeft: /^ *:-+ *$/,\n    startATag: /^<a /i,\n    endATag: /^<\\/a>/i,\n    startPreScriptTag: /^<(pre|code|kbd|script)(\\s|>)/i,\n    endPreScriptTag: /^<\\/(pre|code|kbd|script)(\\s|>)/i,\n    startAngleBracket: /^</,\n    endAngleBracket: />$/,\n    pedanticHrefTitle: /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/,\n    unicodeAlphaNumeric: /[\\p{L}\\p{N}]/u,\n    escapeTest: /[&<>\"']/,\n    escapeReplace: /[&<>\"']/g,\n    escapeTestNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/,\n    escapeReplaceNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/g,\n    unescapeTest: /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig,\n    caret: /(^|[^\\[])\\^/g,\n    percentDecode: /%25/g,\n    findPipe: /\\|/g,\n    splitPipe: / \\|/,\n    slashPipe: /\\\\\\|/g,\n    carriageReturn: /\\r\\n|\\r/g,\n    spaceLine: /^ +$/gm,\n    notSpaceStart: /^\\S*/,\n    endingNewline: /\\n$/,\n    listItemRegex: (bull) => new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`),\n    nextBulletRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`),\n    hrRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`),\n    fencesBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`),\n    headingBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`),\n    htmlBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}<(?:[a-z].*>|!--)`, 'i'),\n};\n/**\n * Block-Level Grammar\n */\nconst newline = /^(?:[ \\t]*(?:\\n|$))+/;\nconst blockCode = /^((?: {4}| {0,3}\\t)[^\\n]+(?:\\n(?:[ \\t]*(?:\\n|$))*)?)+/;\nconst fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nconst hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nconst heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nconst bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nconst lheadingCore = /^(?!bull |blockCode|fences|blockquote|heading|html|table)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html|table))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/;\nconst lheading = edit(lheadingCore)\n    .replace(/bull/g, bullet) // lists can interrupt\n    .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n    .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n    .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n    .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n    .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n    .replace(/\\|table/g, '') // table not in commonmark\n    .getRegex();\nconst lheadingGfm = edit(lheadingCore)\n    .replace(/bull/g, bullet) // lists can interrupt\n    .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n    .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n    .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n    .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n    .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n    .replace(/table/g, / {0,3}\\|?(?:[:\\- ]*\\|)+[\\:\\- ]*\\n/) // table can interrupt\n    .getRegex();\nconst _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nconst blockText = /^[^\\n]+/;\nconst _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nconst def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n[ \\t]*)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n[ \\t]*)?| *\\n[ \\t]*)(title))? *(?:\\n+|$)/)\n    .replace('label', _blockLabel)\n    .replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/)\n    .getRegex();\nconst list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/)\n    .replace(/bull/g, bullet)\n    .getRegex();\nconst _tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n    + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n    + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n    + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n    + '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title'\n    + '|tr|track|ul';\nconst _comment = /\u003c!--(?:-?>|[\\s\\S]*?(?:--\u003e|$))/;\nconst html = edit('^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) closing tag\n    + ')', 'i')\n    .replace('comment', _comment)\n    .replace('tag', _tag)\n    .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst paragraph = edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/)\n    .replace('paragraph', paragraph)\n    .getRegex();\n/**\n * Normal Block Grammar\n */\nconst blockNormal = {\n    blockquote,\n    code: blockCode,\n    def,\n    fences,\n    heading,\n    hr,\n    html,\n    lheading,\n    list,\n    newline,\n    paragraph,\n    table: noopTest,\n    text: blockText,\n};\n/**\n * GFM Block Grammar\n */\nconst gfmTable = edit('^ *([^\\\\n ].*)\\\\n' // Header\n    + ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('blockquote', ' {0,3}>')\n    .replace('code', '(?: {4}| {0,3}\\t)[^\\\\n]')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockGfm = {\n    ...blockNormal,\n    lheading: lheadingGfm,\n    table: gfmTable,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n        .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n        .replace('table', gfmTable) // interrupt paragraphs with table\n        .replace('blockquote', ' {0,3}>')\n        .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n        .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n        .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n        .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n        .getRegex(),\n};\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\nconst blockPedantic = {\n    ...blockNormal,\n    html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)'\n        + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n        + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n        .replace('comment', _comment)\n        .replace(/tag/g, '(?!(?:'\n        + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n        + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n        + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n        .getRegex(),\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n    heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n    fences: noopTest, // fences not supported\n    lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' *#{1,6} *[^\\n]')\n        .replace('lheading', lheading)\n        .replace('|table', '')\n        .replace('blockquote', ' {0,3}>')\n        .replace('|fences', '')\n        .replace('|list', '')\n        .replace('|html', '')\n        .replace('|tag', '')\n        .getRegex(),\n};\n/**\n * Inline-Level Grammar\n */\nconst escape$1 = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nconst inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nconst br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nconst inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\nconst _punctuation = /[\\p{P}\\p{S}]/u;\nconst _punctuationOrSpace = /[\\s\\p{P}\\p{S}]/u;\nconst _notPunctuationOrSpace = /[^\\s\\p{P}\\p{S}]/u;\nconst punctuation = edit(/^((?![*_])punctSpace)/, 'u')\n    .replace(/punctSpace/g, _punctuationOrSpace).getRegex();\n// GFM allows ~ inside strong and em for strikethrough\nconst _punctuationGfmStrongEm = /(?!~)[\\p{P}\\p{S}]/u;\nconst _punctuationOrSpaceGfmStrongEm = /(?!~)[\\s\\p{P}\\p{S}]/u;\nconst _notPunctuationOrSpaceGfmStrongEm = /(?:[^\\s\\p{P}\\p{S}]|~)/u;\n// sequences em should skip over [title](link), `code`, <html>\nconst blockSkip = /\\[[^[\\]]*?\\]\\((?:\\\\.|[^\\\\\\(\\)]|\\((?:\\\\.|[^\\\\\\(\\)])*\\))*\\)|`[^`]*?`|<[^<>]*?>/g;\nconst emStrongLDelimCore = /^(?:\\*+(?:((?!\\*)punct)|[^\\s*]))|^_+(?:((?!_)punct)|([^\\s_]))/;\nconst emStrongLDelim = edit(emStrongLDelimCore, 'u')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst emStrongLDelimGfm = edit(emStrongLDelimCore, 'u')\n    .replace(/punct/g, _punctuationGfmStrongEm)\n    .getRegex();\nconst emStrongRDelimAstCore = '^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n    + '|[^*]+(?=[^*])' // Consume to delim\n    + '|(?!\\\\*)punct(\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n    + '|notPunctSpace(\\\\*+)(?!\\\\*)(?=punctSpace|$)' // (2) a***#, a*** can only be a Right Delimiter\n    + '|(?!\\\\*)punctSpace(\\\\*+)(?=notPunctSpace)' // (3) #***a, ***a can only be Left Delimiter\n    + '|[\\\\s](\\\\*+)(?!\\\\*)(?=punct)' // (4) ***# can only be Left Delimiter\n    + '|(?!\\\\*)punct(\\\\*+)(?!\\\\*)(?=punct)' // (5) #***# can be either Left or Right Delimiter\n    + '|notPunctSpace(\\\\*+)(?=notPunctSpace)'; // (6) a***a can be either Left or Right Delimiter\nconst emStrongRDelimAst = edit(emStrongRDelimAstCore, 'gu')\n    .replace(/notPunctSpace/g, _notPunctuationOrSpace)\n    .replace(/punctSpace/g, _punctuationOrSpace)\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst emStrongRDelimAstGfm = edit(emStrongRDelimAstCore, 'gu')\n    .replace(/notPunctSpace/g, _notPunctuationOrSpaceGfmStrongEm)\n    .replace(/punctSpace/g, _punctuationOrSpaceGfmStrongEm)\n    .replace(/punct/g, _punctuationGfmStrongEm)\n    .getRegex();\n// (6) Not allowed for _\nconst emStrongRDelimUnd = edit('^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n    + '|[^_]+(?=[^_])' // Consume to delim\n    + '|(?!_)punct(_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n    + '|notPunctSpace(_+)(?!_)(?=punctSpace|$)' // (2) a___#, a___ can only be a Right Delimiter\n    + '|(?!_)punctSpace(_+)(?=notPunctSpace)' // (3) #___a, ___a can only be Left Delimiter\n    + '|[\\\\s](_+)(?!_)(?=punct)' // (4) ___# can only be Left Delimiter\n    + '|(?!_)punct(_+)(?!_)(?=punct)', 'gu') // (5) #___# can be either Left or Right Delimiter\n    .replace(/notPunctSpace/g, _notPunctuationOrSpace)\n    .replace(/punctSpace/g, _punctuationOrSpace)\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst anyPunctuation = edit(/\\\\(punct)/, 'gu')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/)\n    .replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)\n    .replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/)\n    .getRegex();\nconst _inlineComment = edit(_comment).replace('(?:--\u003e|$)', '--\u003e').getRegex();\nconst tag = edit('^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n    .replace('comment', _inlineComment)\n    .replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\nconst link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:(?:[ \\t]*(?:\\n[ \\t]*)?)(title))?\\s*\\)/)\n    .replace('label', _inlineLabel)\n    .replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^ \\t\\n\\x00-\\x1f]*/)\n    .replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/)\n    .getRegex();\nconst reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/)\n    .replace('label', _inlineLabel)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g')\n    .replace('reflink', reflink)\n    .replace('nolink', nolink)\n    .getRegex();\n/**\n * Normal Inline Grammar\n */\nconst inlineNormal = {\n    _backpedal: noopTest, // only used for GFM url\n    anyPunctuation,\n    autolink,\n    blockSkip,\n    br,\n    code: inlineCode,\n    del: noopTest,\n    emStrongLDelim,\n    emStrongRDelimAst,\n    emStrongRDelimUnd,\n    escape: escape$1,\n    link,\n    nolink,\n    punctuation,\n    reflink,\n    reflinkSearch,\n    tag,\n    text: inlineText,\n    url: noopTest,\n};\n/**\n * Pedantic Inline Grammar\n */\nconst inlinePedantic = {\n    ...inlineNormal,\n    link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n    reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n};\n/**\n * GFM Inline Grammar\n */\nconst inlineGfm = {\n    ...inlineNormal,\n    emStrongRDelimAst: emStrongRDelimAstGfm,\n    emStrongLDelim: emStrongLDelimGfm,\n    url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i')\n        .replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/)\n        .getRegex(),\n    _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n    del: /^(~~?)(?=[^\\s~])((?:\\\\.|[^\\\\])*?(?:\\\\.|[^\\s~\\\\]))\\1(?=[^~]|$)/,\n    text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/,\n};\n/**\n * GFM + Line Breaks Inline Grammar\n */\nconst inlineBreaks = {\n    ...inlineGfm,\n    br: edit(br).replace('{2,}', '*').getRegex(),\n    text: edit(inlineGfm.text)\n        .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n        .replace(/\\{2,\\}/g, '*')\n        .getRegex(),\n};\n/**\n * exports\n */\nconst block = {\n    normal: blockNormal,\n    gfm: blockGfm,\n    pedantic: blockPedantic,\n};\nconst inline = {\n    normal: inlineNormal,\n    gfm: inlineGfm,\n    breaks: inlineBreaks,\n    pedantic: inlinePedantic,\n};\n\n/**\n * Helpers\n */\nconst escapeReplacements = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape(html, encode) {\n    if (encode) {\n        if (other.escapeTest.test(html)) {\n            return html.replace(other.escapeReplace, getEscapeReplacement);\n        }\n    }\n    else {\n        if (other.escapeTestNoEncode.test(html)) {\n            return html.replace(other.escapeReplaceNoEncode, getEscapeReplacement);\n        }\n    }\n    return html;\n}\nfunction cleanUrl(href) {\n    try {\n        href = encodeURI(href).replace(other.percentDecode, '%');\n    }\n    catch {\n        return null;\n    }\n    return href;\n}\nfunction splitCells(tableRow, count) {\n    // ensure that every cell-delimiting pipe has a space\n    // before it to distinguish it from an escaped pipe\n    const row = tableRow.replace(other.findPipe, (match, offset, str) => {\n        let escaped = false;\n        let curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\')\n            escaped = !escaped;\n        if (escaped) {\n            // odd number of slashes means | is escaped\n            // so we leave it alone\n            return '|';\n        }\n        else {\n            // add space before unescaped |\n            return ' |';\n        }\n    }), cells = row.split(other.splitPipe);\n    let i = 0;\n    // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n    if (!cells[0].trim()) {\n        cells.shift();\n    }\n    if (cells.length > 0 && !cells.at(-1)?.trim()) {\n        cells.pop();\n    }\n    if (count) {\n        if (cells.length > count) {\n            cells.splice(count);\n        }\n        else {\n            while (cells.length < count)\n                cells.push('');\n        }\n    }\n    for (; i < cells.length; i++) {\n        // leading or trailing whitespace is ignored per the gfm spec\n        cells[i] = cells[i].trim().replace(other.slashPipe, '|');\n    }\n    return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n    const l = str.length;\n    if (l === 0) {\n        return '';\n    }\n    // Length of suffix matching the invert condition.\n    let suffLen = 0;\n    // Step left until we fail to match the invert condition.\n    while (suffLen < l) {\n        const currChar = str.charAt(l - suffLen - 1);\n        if (currChar === c && true) {\n            suffLen++;\n        }\n        else {\n            break;\n        }\n    }\n    return str.slice(0, l - suffLen);\n}\nfunction findClosingBracket(str, b) {\n    if (str.indexOf(b[1]) === -1) {\n        return -1;\n    }\n    let level = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === '\\\\') {\n            i++;\n        }\n        else if (str[i] === b[0]) {\n            level++;\n        }\n        else if (str[i] === b[1]) {\n            level--;\n            if (level < 0) {\n                return i;\n            }\n        }\n    }\n    if (level > 0) {\n        return -2;\n    }\n    return -1;\n}\n\nfunction outputLink(cap, link, raw, lexer, rules) {\n    const href = link.href;\n    const title = link.title || null;\n    const text = cap[1].replace(rules.other.outputLinkReplace, '$1');\n    if (cap[0].charAt(0) !== '!') {\n        lexer.state.inLink = true;\n        const token = {\n            type: 'link',\n            raw,\n            href,\n            title,\n            text,\n            tokens: lexer.inlineTokens(text),\n        };\n        lexer.state.inLink = false;\n        return token;\n    }\n    return {\n        type: 'image',\n        raw,\n        href,\n        title,\n        text,\n    };\n}\nfunction indentCodeCompensation(raw, text, rules) {\n    const matchIndentToCode = raw.match(rules.other.indentCodeCompensation);\n    if (matchIndentToCode === null) {\n        return text;\n    }\n    const indentToCode = matchIndentToCode[1];\n    return text\n        .split('\\n')\n        .map(node => {\n        const matchIndentInNode = node.match(rules.other.beginningSpace);\n        if (matchIndentInNode === null) {\n            return node;\n        }\n        const [indentInNode] = matchIndentInNode;\n        if (indentInNode.length >= indentToCode.length) {\n            return node.slice(indentToCode.length);\n        }\n        return node;\n    })\n        .join('\\n');\n}\n/**\n * Tokenizer\n */\nclass _Tokenizer {\n    options;\n    rules; // set by the lexer\n    lexer; // set by the lexer\n    constructor(options) {\n        this.options = options || exports.defaults;\n    }\n    space(src) {\n        const cap = this.rules.block.newline.exec(src);\n        if (cap && cap[0].length > 0) {\n            return {\n                type: 'space',\n                raw: cap[0],\n            };\n        }\n    }\n    code(src) {\n        const cap = this.rules.block.code.exec(src);\n        if (cap) {\n            const text = cap[0].replace(this.rules.other.codeRemoveIndent, '');\n            return {\n                type: 'code',\n                raw: cap[0],\n                codeBlockStyle: 'indented',\n                text: !this.options.pedantic\n                    ? rtrim(text, '\\n')\n                    : text,\n            };\n        }\n    }\n    fences(src) {\n        const cap = this.rules.block.fences.exec(src);\n        if (cap) {\n            const raw = cap[0];\n            const text = indentCodeCompensation(raw, cap[3] || '', this.rules);\n            return {\n                type: 'code',\n                raw,\n                lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n                text,\n            };\n        }\n    }\n    heading(src) {\n        const cap = this.rules.block.heading.exec(src);\n        if (cap) {\n            let text = cap[2].trim();\n            // remove trailing #s\n            if (this.rules.other.endingHash.test(text)) {\n                const trimmed = rtrim(text, '#');\n                if (this.options.pedantic) {\n                    text = trimmed.trim();\n                }\n                else if (!trimmed || this.rules.other.endingSpaceChar.test(trimmed)) {\n                    // CommonMark requires space before trailing #s\n                    text = trimmed.trim();\n                }\n            }\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[1].length,\n                text,\n                tokens: this.lexer.inline(text),\n            };\n        }\n    }\n    hr(src) {\n        const cap = this.rules.block.hr.exec(src);\n        if (cap) {\n            return {\n                type: 'hr',\n                raw: rtrim(cap[0], '\\n'),\n            };\n        }\n    }\n    blockquote(src) {\n        const cap = this.rules.block.blockquote.exec(src);\n        if (cap) {\n            let lines = rtrim(cap[0], '\\n').split('\\n');\n            let raw = '';\n            let text = '';\n            const tokens = [];\n            while (lines.length > 0) {\n                let inBlockquote = false;\n                const currentLines = [];\n                let i;\n                for (i = 0; i < lines.length; i++) {\n                    // get lines up to a continuation\n                    if (this.rules.other.blockquoteStart.test(lines[i])) {\n                        currentLines.push(lines[i]);\n                        inBlockquote = true;\n                    }\n                    else if (!inBlockquote) {\n                        currentLines.push(lines[i]);\n                    }\n                    else {\n                        break;\n                    }\n                }\n                lines = lines.slice(i);\n                const currentRaw = currentLines.join('\\n');\n                const currentText = currentRaw\n                    // precede setext continuation with 4 spaces so it isn't a setext\n                    .replace(this.rules.other.blockquoteSetextReplace, '\\n    $1')\n                    .replace(this.rules.other.blockquoteSetextReplace2, '');\n                raw = raw ? `${raw}\\n${currentRaw}` : currentRaw;\n                text = text ? `${text}\\n${currentText}` : currentText;\n                // parse blockquote lines as top level tokens\n                // merge paragraphs if this is a continuation\n                const top = this.lexer.state.top;\n                this.lexer.state.top = true;\n                this.lexer.blockTokens(currentText, tokens, true);\n                this.lexer.state.top = top;\n                // if there is no continuation then we are done\n                if (lines.length === 0) {\n                    break;\n                }\n                const lastToken = tokens.at(-1);\n                if (lastToken?.type === 'code') {\n                    // blockquote continuation cannot be preceded by a code block\n                    break;\n                }\n                else if (lastToken?.type === 'blockquote') {\n                    // include continuation in nested blockquote\n                    const oldToken = lastToken;\n                    const newText = oldToken.raw + '\\n' + lines.join('\\n');\n                    const newToken = this.blockquote(newText);\n                    tokens[tokens.length - 1] = newToken;\n                    raw = raw.substring(0, raw.length - oldToken.raw.length) + newToken.raw;\n                    text = text.substring(0, text.length - oldToken.text.length) + newToken.text;\n                    break;\n                }\n                else if (lastToken?.type === 'list') {\n                    // include continuation in nested list\n                    const oldToken = lastToken;\n                    const newText = oldToken.raw + '\\n' + lines.join('\\n');\n                    const newToken = this.list(newText);\n                    tokens[tokens.length - 1] = newToken;\n                    raw = raw.substring(0, raw.length - lastToken.raw.length) + newToken.raw;\n                    text = text.substring(0, text.length - oldToken.raw.length) + newToken.raw;\n                    lines = newText.substring(tokens.at(-1).raw.length).split('\\n');\n                    continue;\n                }\n            }\n            return {\n                type: 'blockquote',\n                raw,\n                tokens,\n                text,\n            };\n        }\n    }\n    list(src) {\n        let cap = this.rules.block.list.exec(src);\n        if (cap) {\n            let bull = cap[1].trim();\n            const isordered = bull.length > 1;\n            const list = {\n                type: 'list',\n                raw: '',\n                ordered: isordered,\n                start: isordered ? +bull.slice(0, -1) : '',\n                loose: false,\n                items: [],\n            };\n            bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n            if (this.options.pedantic) {\n                bull = isordered ? bull : '[*+-]';\n            }\n            // Get next list item\n            const itemRegex = this.rules.other.listItemRegex(bull);\n            let endsWithBlankLine = false;\n            // Check if current bullet point can start a new List Item\n            while (src) {\n                let endEarly = false;\n                let raw = '';\n                let itemContents = '';\n                if (!(cap = itemRegex.exec(src))) {\n                    break;\n                }\n                if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n                    break;\n                }\n                raw = cap[0];\n                src = src.substring(raw.length);\n                let line = cap[2].split('\\n', 1)[0].replace(this.rules.other.listReplaceTabs, (t) => ' '.repeat(3 * t.length));\n                let nextLine = src.split('\\n', 1)[0];\n                let blankLine = !line.trim();\n                let indent = 0;\n                if (this.options.pedantic) {\n                    indent = 2;\n                    itemContents = line.trimStart();\n                }\n                else if (blankLine) {\n                    indent = cap[1].length + 1;\n                }\n                else {\n                    indent = cap[2].search(this.rules.other.nonSpaceChar); // Find first non-space char\n                    indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n                    itemContents = line.slice(indent);\n                    indent += cap[1].length;\n                }\n                if (blankLine && this.rules.other.blankLine.test(nextLine)) { // Items begin with at most one blank line\n                    raw += nextLine + '\\n';\n                    src = src.substring(nextLine.length + 1);\n                    endEarly = true;\n                }\n                if (!endEarly) {\n                    const nextBulletRegex = this.rules.other.nextBulletRegex(indent);\n                    const hrRegex = this.rules.other.hrRegex(indent);\n                    const fencesBeginRegex = this.rules.other.fencesBeginRegex(indent);\n                    const headingBeginRegex = this.rules.other.headingBeginRegex(indent);\n                    const htmlBeginRegex = this.rules.other.htmlBeginRegex(indent);\n                    // Check if following lines should be included in List Item\n                    while (src) {\n                        const rawLine = src.split('\\n', 1)[0];\n                        let nextLineWithoutTabs;\n                        nextLine = rawLine;\n                        // Re-align to follow commonmark nesting rules\n                        if (this.options.pedantic) {\n                            nextLine = nextLine.replace(this.rules.other.listReplaceNesting, '  ');\n                            nextLineWithoutTabs = nextLine;\n                        }\n                        else {\n                            nextLineWithoutTabs = nextLine.replace(this.rules.other.tabCharGlobal, '    ');\n                        }\n                        // End list item if found code fences\n                        if (fencesBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new heading\n                        if (headingBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of html block\n                        if (htmlBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new bullet\n                        if (nextBulletRegex.test(nextLine)) {\n                            break;\n                        }\n                        // Horizontal rule found\n                        if (hrRegex.test(nextLine)) {\n                            break;\n                        }\n                        if (nextLineWithoutTabs.search(this.rules.other.nonSpaceChar) >= indent || !nextLine.trim()) { // Dedent if possible\n                            itemContents += '\\n' + nextLineWithoutTabs.slice(indent);\n                        }\n                        else {\n                            // not enough indentation\n                            if (blankLine) {\n                                break;\n                            }\n                            // paragraph continuation unless last line was a different block level element\n                            if (line.replace(this.rules.other.tabCharGlobal, '    ').search(this.rules.other.nonSpaceChar) >= 4) { // indented code block\n                                break;\n                            }\n                            if (fencesBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (headingBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (hrRegex.test(line)) {\n                                break;\n                            }\n                            itemContents += '\\n' + nextLine;\n                        }\n                        if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n                            blankLine = true;\n                        }\n                        raw += rawLine + '\\n';\n                        src = src.substring(rawLine.length + 1);\n                        line = nextLineWithoutTabs.slice(indent);\n                    }\n                }\n                if (!list.loose) {\n                    // If the previous item ended with a blank line, the list is loose\n                    if (endsWithBlankLine) {\n                        list.loose = true;\n                    }\n                    else if (this.rules.other.doubleBlankLine.test(raw)) {\n                        endsWithBlankLine = true;\n                    }\n                }\n                let istask = null;\n                let ischecked;\n                // Check for task list items\n                if (this.options.gfm) {\n                    istask = this.rules.other.listIsTask.exec(itemContents);\n                    if (istask) {\n                        ischecked = istask[0] !== '[ ] ';\n                        itemContents = itemContents.replace(this.rules.other.listReplaceTask, '');\n                    }\n                }\n                list.items.push({\n                    type: 'list_item',\n                    raw,\n                    task: !!istask,\n                    checked: ischecked,\n                    loose: false,\n                    text: itemContents,\n                    tokens: [],\n                });\n                list.raw += raw;\n            }\n            // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n            const lastItem = list.items.at(-1);\n            if (lastItem) {\n                lastItem.raw = lastItem.raw.trimEnd();\n                lastItem.text = lastItem.text.trimEnd();\n            }\n            else {\n                // not a list since there were no items\n                return;\n            }\n            list.raw = list.raw.trimEnd();\n            // Item child tokens handled here at end because we needed to have the final item to trim it first\n            for (let i = 0; i < list.items.length; i++) {\n                this.lexer.state.top = false;\n                list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n                if (!list.loose) {\n                    // Check if list should be loose\n                    const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n                    const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => this.rules.other.anyLine.test(t.raw));\n                    list.loose = hasMultipleLineBreaks;\n                }\n            }\n            // Set all items to loose if list is loose\n            if (list.loose) {\n                for (let i = 0; i < list.items.length; i++) {\n                    list.items[i].loose = true;\n                }\n            }\n            return list;\n        }\n    }\n    html(src) {\n        const cap = this.rules.block.html.exec(src);\n        if (cap) {\n            const token = {\n                type: 'html',\n                block: true,\n                raw: cap[0],\n                pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n                text: cap[0],\n            };\n            return token;\n        }\n    }\n    def(src) {\n        const cap = this.rules.block.def.exec(src);\n        if (cap) {\n            const tag = cap[1].toLowerCase().replace(this.rules.other.multipleSpaceGlobal, ' ');\n            const href = cap[2] ? cap[2].replace(this.rules.other.hrefBrackets, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n            const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n            return {\n                type: 'def',\n                tag,\n                raw: cap[0],\n                href,\n                title,\n            };\n        }\n    }\n    table(src) {\n        const cap = this.rules.block.table.exec(src);\n        if (!cap) {\n            return;\n        }\n        if (!this.rules.other.tableDelimiter.test(cap[2])) {\n            // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n            return;\n        }\n        const headers = splitCells(cap[1]);\n        const aligns = cap[2].replace(this.rules.other.tableAlignChars, '').split('|');\n        const rows = cap[3]?.trim() ? cap[3].replace(this.rules.other.tableRowBlankLine, '').split('\\n') : [];\n        const item = {\n            type: 'table',\n            raw: cap[0],\n            header: [],\n            align: [],\n            rows: [],\n        };\n        if (headers.length !== aligns.length) {\n            // header and align columns must be equal, rows can be different.\n            return;\n        }\n        for (const align of aligns) {\n            if (this.rules.other.tableAlignRight.test(align)) {\n                item.align.push('right');\n            }\n            else if (this.rules.other.tableAlignCenter.test(align)) {\n                item.align.push('center');\n            }\n            else if (this.rules.other.tableAlignLeft.test(align)) {\n                item.align.push('left');\n            }\n            else {\n                item.align.push(null);\n            }\n        }\n        for (let i = 0; i < headers.length; i++) {\n            item.header.push({\n                text: headers[i],\n                tokens: this.lexer.inline(headers[i]),\n                header: true,\n                align: item.align[i],\n            });\n        }\n        for (const row of rows) {\n            item.rows.push(splitCells(row, item.header.length).map((cell, i) => {\n                return {\n                    text: cell,\n                    tokens: this.lexer.inline(cell),\n                    header: false,\n                    align: item.align[i],\n                };\n            }));\n        }\n        return item;\n    }\n    lheading(src) {\n        const cap = this.rules.block.lheading.exec(src);\n        if (cap) {\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[2].charAt(0) === '=' ? 1 : 2,\n                text: cap[1],\n                tokens: this.lexer.inline(cap[1]),\n            };\n        }\n    }\n    paragraph(src) {\n        const cap = this.rules.block.paragraph.exec(src);\n        if (cap) {\n            const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n                ? cap[1].slice(0, -1)\n                : cap[1];\n            return {\n                type: 'paragraph',\n                raw: cap[0],\n                text,\n                tokens: this.lexer.inline(text),\n            };\n        }\n    }\n    text(src) {\n        const cap = this.rules.block.text.exec(src);\n        if (cap) {\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                tokens: this.lexer.inline(cap[0]),\n            };\n        }\n    }\n    escape(src) {\n        const cap = this.rules.inline.escape.exec(src);\n        if (cap) {\n            return {\n                type: 'escape',\n                raw: cap[0],\n                text: cap[1],\n            };\n        }\n    }\n    tag(src) {\n        const cap = this.rules.inline.tag.exec(src);\n        if (cap) {\n            if (!this.lexer.state.inLink && this.rules.other.startATag.test(cap[0])) {\n                this.lexer.state.inLink = true;\n            }\n            else if (this.lexer.state.inLink && this.rules.other.endATag.test(cap[0])) {\n                this.lexer.state.inLink = false;\n            }\n            if (!this.lexer.state.inRawBlock && this.rules.other.startPreScriptTag.test(cap[0])) {\n                this.lexer.state.inRawBlock = true;\n            }\n            else if (this.lexer.state.inRawBlock && this.rules.other.endPreScriptTag.test(cap[0])) {\n                this.lexer.state.inRawBlock = false;\n            }\n            return {\n                type: 'html',\n                raw: cap[0],\n                inLink: this.lexer.state.inLink,\n                inRawBlock: this.lexer.state.inRawBlock,\n                block: false,\n                text: cap[0],\n            };\n        }\n    }\n    link(src) {\n        const cap = this.rules.inline.link.exec(src);\n        if (cap) {\n            const trimmedUrl = cap[2].trim();\n            if (!this.options.pedantic && this.rules.other.startAngleBracket.test(trimmedUrl)) {\n                // commonmark requires matching angle brackets\n                if (!(this.rules.other.endAngleBracket.test(trimmedUrl))) {\n                    return;\n                }\n                // ending angle bracket cannot be escaped\n                const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n                if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n                    return;\n                }\n            }\n            else {\n                // find closing parenthesis\n                const lastParenIndex = findClosingBracket(cap[2], '()');\n                if (lastParenIndex === -2) {\n                    // more open parens than closed\n                    return;\n                }\n                if (lastParenIndex > -1) {\n                    const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n                    const linkLen = start + cap[1].length + lastParenIndex;\n                    cap[2] = cap[2].substring(0, lastParenIndex);\n                    cap[0] = cap[0].substring(0, linkLen).trim();\n                    cap[3] = '';\n                }\n            }\n            let href = cap[2];\n            let title = '';\n            if (this.options.pedantic) {\n                // split pedantic href and title\n                const link = this.rules.other.pedanticHrefTitle.exec(href);\n                if (link) {\n                    href = link[1];\n                    title = link[3];\n                }\n            }\n            else {\n                title = cap[3] ? cap[3].slice(1, -1) : '';\n            }\n            href = href.trim();\n            if (this.rules.other.startAngleBracket.test(href)) {\n                if (this.options.pedantic && !(this.rules.other.endAngleBracket.test(trimmedUrl))) {\n                    // pedantic allows starting angle bracket without ending angle bracket\n                    href = href.slice(1);\n                }\n                else {\n                    href = href.slice(1, -1);\n                }\n            }\n            return outputLink(cap, {\n                href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n                title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title,\n            }, cap[0], this.lexer, this.rules);\n        }\n    }\n    reflink(src, links) {\n        let cap;\n        if ((cap = this.rules.inline.reflink.exec(src))\n            || (cap = this.rules.inline.nolink.exec(src))) {\n            const linkString = (cap[2] || cap[1]).replace(this.rules.other.multipleSpaceGlobal, ' ');\n            const link = links[linkString.toLowerCase()];\n            if (!link) {\n                const text = cap[0].charAt(0);\n                return {\n                    type: 'text',\n                    raw: text,\n                    text,\n                };\n            }\n            return outputLink(cap, link, cap[0], this.lexer, this.rules);\n        }\n    }\n    emStrong(src, maskedSrc, prevChar = '') {\n        let match = this.rules.inline.emStrongLDelim.exec(src);\n        if (!match)\n            return;\n        // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n        if (match[3] && prevChar.match(this.rules.other.unicodeAlphaNumeric))\n            return;\n        const nextChar = match[1] || match[2] || '';\n        if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n            // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n            const lLength = [...match[0]].length - 1;\n            let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n            const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n            endReg.lastIndex = 0;\n            // Clip maskedSrc to same section of string as src (move to lexer?)\n            maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n            while ((match = endReg.exec(maskedSrc)) != null) {\n                rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n                if (!rDelim)\n                    continue; // skip single * in __abc*abc__\n                rLength = [...rDelim].length;\n                if (match[3] || match[4]) { // found another Left Delim\n                    delimTotal += rLength;\n                    continue;\n                }\n                else if (match[5] || match[6]) { // either Left or Right Delim\n                    if (lLength % 3 && !((lLength + rLength) % 3)) {\n                        midDelimTotal += rLength;\n                        continue; // CommonMark Emphasis Rules 9-10\n                    }\n                }\n                delimTotal -= rLength;\n                if (delimTotal > 0)\n                    continue; // Haven't found enough closing delimiters\n                // Remove extra characters. *a*** -> *a*\n                rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n                // char length can be >1 for unicode characters;\n                const lastCharLength = [...match[0]][0].length;\n                const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n                // Create `em` if smallest delimiter has odd char count. *a***\n                if (Math.min(lLength, rLength) % 2) {\n                    const text = raw.slice(1, -1);\n                    return {\n                        type: 'em',\n                        raw,\n                        text,\n                        tokens: this.lexer.inlineTokens(text),\n                    };\n                }\n                // Create 'strong' if smallest delimiter has even char count. **a***\n                const text = raw.slice(2, -2);\n                return {\n                    type: 'strong',\n                    raw,\n                    text,\n                    tokens: this.lexer.inlineTokens(text),\n                };\n            }\n        }\n    }\n    codespan(src) {\n        const cap = this.rules.inline.code.exec(src);\n        if (cap) {\n            let text = cap[2].replace(this.rules.other.newLineCharGlobal, ' ');\n            const hasNonSpaceChars = this.rules.other.nonSpaceChar.test(text);\n            const hasSpaceCharsOnBothEnds = this.rules.other.startingSpaceChar.test(text) && this.rules.other.endingSpaceChar.test(text);\n            if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n                text = text.substring(1, text.length - 1);\n            }\n            return {\n                type: 'codespan',\n                raw: cap[0],\n                text,\n            };\n        }\n    }\n    br(src) {\n        const cap = this.rules.inline.br.exec(src);\n        if (cap) {\n            return {\n                type: 'br',\n                raw: cap[0],\n            };\n        }\n    }\n    del(src) {\n        const cap = this.rules.inline.del.exec(src);\n        if (cap) {\n            return {\n                type: 'del',\n                raw: cap[0],\n                text: cap[2],\n                tokens: this.lexer.inlineTokens(cap[2]),\n            };\n        }\n    }\n    autolink(src) {\n        const cap = this.rules.inline.autolink.exec(src);\n        if (cap) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = cap[1];\n                href = 'mailto:' + text;\n            }\n            else {\n                text = cap[1];\n                href = text;\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text,\n                    },\n                ],\n            };\n        }\n    }\n    url(src) {\n        let cap;\n        if (cap = this.rules.inline.url.exec(src)) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = cap[0];\n                href = 'mailto:' + text;\n            }\n            else {\n                // do extended autolink path validation\n                let prevCapZero;\n                do {\n                    prevCapZero = cap[0];\n                    cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n                } while (prevCapZero !== cap[0]);\n                text = cap[0];\n                if (cap[1] === 'www.') {\n                    href = 'http://' + cap[0];\n                }\n                else {\n                    href = cap[0];\n                }\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text,\n                    },\n                ],\n            };\n        }\n    }\n    inlineText(src) {\n        const cap = this.rules.inline.text.exec(src);\n        if (cap) {\n            const escaped = this.lexer.state.inRawBlock;\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                escaped,\n            };\n        }\n    }\n}\n\n/**\n * Block Lexer\n */\nclass _Lexer {\n    tokens;\n    options;\n    state;\n    tokenizer;\n    inlineQueue;\n    constructor(options) {\n        // TokenList cannot be created in one go\n        this.tokens = [];\n        this.tokens.links = Object.create(null);\n        this.options = options || exports.defaults;\n        this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n        this.tokenizer = this.options.tokenizer;\n        this.tokenizer.options = this.options;\n        this.tokenizer.lexer = this;\n        this.inlineQueue = [];\n        this.state = {\n            inLink: false,\n            inRawBlock: false,\n            top: true,\n        };\n        const rules = {\n            other,\n            block: block.normal,\n            inline: inline.normal,\n        };\n        if (this.options.pedantic) {\n            rules.block = block.pedantic;\n            rules.inline = inline.pedantic;\n        }\n        else if (this.options.gfm) {\n            rules.block = block.gfm;\n            if (this.options.breaks) {\n                rules.inline = inline.breaks;\n            }\n            else {\n                rules.inline = inline.gfm;\n            }\n        }\n        this.tokenizer.rules = rules;\n    }\n    /**\n     * Expose Rules\n     */\n    static get rules() {\n        return {\n            block,\n            inline,\n        };\n    }\n    /**\n     * Static Lex Method\n     */\n    static lex(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n    static lexInline(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.inlineTokens(src);\n    }\n    /**\n     * Preprocessing\n     */\n    lex(src) {\n        src = src.replace(other.carriageReturn, '\\n');\n        this.blockTokens(src, this.tokens);\n        for (let i = 0; i < this.inlineQueue.length; i++) {\n            const next = this.inlineQueue[i];\n            this.inlineTokens(next.src, next.tokens);\n        }\n        this.inlineQueue = [];\n        return this.tokens;\n    }\n    blockTokens(src, tokens = [], lastParagraphClipped = false) {\n        if (this.options.pedantic) {\n            src = src.replace(other.tabCharGlobal, '    ').replace(other.spaceLine, '');\n        }\n        while (src) {\n            let token;\n            if (this.options.extensions?.block?.some((extTokenizer) => {\n                if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    return true;\n                }\n                return false;\n            })) {\n                continue;\n            }\n            // newline\n            if (token = this.tokenizer.space(src)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                if (token.raw.length === 1 && lastToken !== undefined) {\n                    // if there's a single \\n as a spacer, it's terminating the last line,\n                    // so move it there so that we don't get unnecessary paragraph tags\n                    lastToken.raw += '\\n';\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.code(src)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                // An indented code block cannot interrupt a paragraph.\n                if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.at(-1).src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // fences\n            if (token = this.tokenizer.fences(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // heading\n            if (token = this.tokenizer.heading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // hr\n            if (token = this.tokenizer.hr(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // blockquote\n            if (token = this.tokenizer.blockquote(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // list\n            if (token = this.tokenizer.list(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // html\n            if (token = this.tokenizer.html(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // def\n            if (token = this.tokenizer.def(src)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.raw;\n                    this.inlineQueue.at(-1).src = lastToken.text;\n                }\n                else if (!this.tokens.links[token.tag]) {\n                    this.tokens.links[token.tag] = {\n                        href: token.href,\n                        title: token.title,\n                    };\n                }\n                continue;\n            }\n            // table (gfm)\n            if (token = this.tokenizer.table(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // lheading\n            if (token = this.tokenizer.lheading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // top-level paragraph\n            // prevent paragraph consuming extensions by clipping 'src' to extension start\n            let cutSrc = src;\n            if (this.options.extensions?.startBlock) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startBlock.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n                const lastToken = tokens.at(-1);\n                if (lastParagraphClipped && lastToken?.type === 'paragraph') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue.at(-1).src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                lastParagraphClipped = cutSrc.length !== src.length;\n                src = src.substring(token.raw.length);\n                continue;\n            }\n            // text\n            if (token = this.tokenizer.text(src)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                if (lastToken?.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue.at(-1).src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        this.state.top = true;\n        return tokens;\n    }\n    inline(src, tokens = []) {\n        this.inlineQueue.push({ src, tokens });\n        return tokens;\n    }\n    /**\n     * Lexing/Compiling\n     */\n    inlineTokens(src, tokens = []) {\n        // String with links masked to avoid interference with em and strong\n        let maskedSrc = src;\n        let match = null;\n        // Mask out reflinks\n        if (this.tokens.links) {\n            const links = Object.keys(this.tokens.links);\n            if (links.length > 0) {\n                while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n                    if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n                        maskedSrc = maskedSrc.slice(0, match.index)\n                            + '[' + 'a'.repeat(match[0].length - 2) + ']'\n                            + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n                    }\n                }\n            }\n        }\n        // Mask out escaped characters\n        while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n        }\n        // Mask out other blocks\n        while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n        }\n        let keepPrevChar = false;\n        let prevChar = '';\n        while (src) {\n            if (!keepPrevChar) {\n                prevChar = '';\n            }\n            keepPrevChar = false;\n            let token;\n            // extensions\n            if (this.options.extensions?.inline?.some((extTokenizer) => {\n                if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    return true;\n                }\n                return false;\n            })) {\n                continue;\n            }\n            // escape\n            if (token = this.tokenizer.escape(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // tag\n            if (token = this.tokenizer.tag(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // link\n            if (token = this.tokenizer.link(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // reflink, nolink\n            if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                if (token.type === 'text' && lastToken?.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // em & strong\n            if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.codespan(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // br\n            if (token = this.tokenizer.br(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // del (gfm)\n            if (token = this.tokenizer.del(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // autolink\n            if (token = this.tokenizer.autolink(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // url (gfm)\n            if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // text\n            // prevent inlineText consuming extensions by clipping 'src' to extension start\n            let cutSrc = src;\n            if (this.options.extensions?.startInline) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startInline.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (token = this.tokenizer.inlineText(cutSrc)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n                    prevChar = token.raw.slice(-1);\n                }\n                keepPrevChar = true;\n                const lastToken = tokens.at(-1);\n                if (lastToken?.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        return tokens;\n    }\n}\n\n/**\n * Renderer\n */\nclass _Renderer {\n    options;\n    parser; // set by the parser\n    constructor(options) {\n        this.options = options || exports.defaults;\n    }\n    space(token) {\n        return '';\n    }\n    code({ text, lang, escaped }) {\n        const langString = (lang || '').match(other.notSpaceStart)?.[0];\n        const code = text.replace(other.endingNewline, '') + '\\n';\n        if (!langString) {\n            return '<pre><code>'\n                + (escaped ? code : escape(code, true))\n                + '</code></pre>\\n';\n        }\n        return '<pre><code class=\"language-'\n            + escape(langString)\n            + '\">'\n            + (escaped ? code : escape(code, true))\n            + '</code></pre>\\n';\n    }\n    blockquote({ tokens }) {\n        const body = this.parser.parse(tokens);\n        return `<blockquote>\\n${body}</blockquote>\\n`;\n    }\n    html({ text }) {\n        return text;\n    }\n    heading({ tokens, depth }) {\n        return `<h${depth}>${this.parser.parseInline(tokens)}</h${depth}>\\n`;\n    }\n    hr(token) {\n        return '<hr>\\n';\n    }\n    list(token) {\n        const ordered = token.ordered;\n        const start = token.start;\n        let body = '';\n        for (let j = 0; j < token.items.length; j++) {\n            const item = token.items[j];\n            body += this.listitem(item);\n        }\n        const type = ordered ? 'ol' : 'ul';\n        const startAttr = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n        return '<' + type + startAttr + '>\\n' + body + '</' + type + '>\\n';\n    }\n    listitem(item) {\n        let itemBody = '';\n        if (item.task) {\n            const checkbox = this.checkbox({ checked: !!item.checked });\n            if (item.loose) {\n                if (item.tokens[0]?.type === 'paragraph') {\n                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                        item.tokens[0].tokens[0].text = checkbox + ' ' + escape(item.tokens[0].tokens[0].text);\n                        item.tokens[0].tokens[0].escaped = true;\n                    }\n                }\n                else {\n                    item.tokens.unshift({\n                        type: 'text',\n                        raw: checkbox + ' ',\n                        text: checkbox + ' ',\n                        escaped: true,\n                    });\n                }\n            }\n            else {\n                itemBody += checkbox + ' ';\n            }\n        }\n        itemBody += this.parser.parse(item.tokens, !!item.loose);\n        return `<li>${itemBody}</li>\\n`;\n    }\n    checkbox({ checked }) {\n        return '<input '\n            + (checked ? 'checked=\"\" ' : '')\n            + 'disabled=\"\" type=\"checkbox\">';\n    }\n    paragraph({ tokens }) {\n        return `<p>${this.parser.parseInline(tokens)}</p>\\n`;\n    }\n    table(token) {\n        let header = '';\n        // header\n        let cell = '';\n        for (let j = 0; j < token.header.length; j++) {\n            cell += this.tablecell(token.header[j]);\n        }\n        header += this.tablerow({ text: cell });\n        let body = '';\n        for (let j = 0; j < token.rows.length; j++) {\n            const row = token.rows[j];\n            cell = '';\n            for (let k = 0; k < row.length; k++) {\n                cell += this.tablecell(row[k]);\n            }\n            body += this.tablerow({ text: cell });\n        }\n        if (body)\n            body = `<tbody>${body}</tbody>`;\n        return '<table>\\n'\n            + '<thead>\\n'\n            + header\n            + '</thead>\\n'\n            + body\n            + '</table>\\n';\n    }\n    tablerow({ text }) {\n        return `<tr>\\n${text}</tr>\\n`;\n    }\n    tablecell(token) {\n        const content = this.parser.parseInline(token.tokens);\n        const type = token.header ? 'th' : 'td';\n        const tag = token.align\n            ? `<${type} align=\"${token.align}\">`\n            : `<${type}>`;\n        return tag + content + `</${type}>\\n`;\n    }\n    /**\n     * span level renderer\n     */\n    strong({ tokens }) {\n        return `<strong>${this.parser.parseInline(tokens)}</strong>`;\n    }\n    em({ tokens }) {\n        return `<em>${this.parser.parseInline(tokens)}</em>`;\n    }\n    codespan({ text }) {\n        return `<code>${escape(text, true)}</code>`;\n    }\n    br(token) {\n        return '<br>';\n    }\n    del({ tokens }) {\n        return `<del>${this.parser.parseInline(tokens)}</del>`;\n    }\n    link({ href, title, tokens }) {\n        const text = this.parser.parseInline(tokens);\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = '<a href=\"' + href + '\"';\n        if (title) {\n            out += ' title=\"' + (escape(title)) + '\"';\n        }\n        out += '>' + text + '</a>';\n        return out;\n    }\n    image({ href, title, text }) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return escape(text);\n        }\n        href = cleanHref;\n        let out = `<img src=\"${href}\" alt=\"${text}\"`;\n        if (title) {\n            out += ` title=\"${escape(title)}\"`;\n        }\n        out += '>';\n        return out;\n    }\n    text(token) {\n        return 'tokens' in token && token.tokens\n            ? this.parser.parseInline(token.tokens)\n            : ('escaped' in token && token.escaped ? token.text : escape(token.text));\n    }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass _TextRenderer {\n    // no need for block level renderers\n    strong({ text }) {\n        return text;\n    }\n    em({ text }) {\n        return text;\n    }\n    codespan({ text }) {\n        return text;\n    }\n    del({ text }) {\n        return text;\n    }\n    html({ text }) {\n        return text;\n    }\n    text({ text }) {\n        return text;\n    }\n    link({ text }) {\n        return '' + text;\n    }\n    image({ text }) {\n        return '' + text;\n    }\n    br() {\n        return '';\n    }\n}\n\n/**\n * Parsing & Compiling\n */\nclass _Parser {\n    options;\n    renderer;\n    textRenderer;\n    constructor(options) {\n        this.options = options || exports.defaults;\n        this.options.renderer = this.options.renderer || new _Renderer();\n        this.renderer = this.options.renderer;\n        this.renderer.options = this.options;\n        this.renderer.parser = this;\n        this.textRenderer = new _TextRenderer();\n    }\n    /**\n     * Static Parse Method\n     */\n    static parse(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n    static parseInline(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parseInline(tokens);\n    }\n    /**\n     * Parse Loop\n     */\n    parse(tokens, top = true) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const anyToken = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions?.renderers?.[anyToken.type]) {\n                const genericToken = anyToken;\n                const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n                if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            const token = anyToken;\n            switch (token.type) {\n                case 'space': {\n                    out += this.renderer.space(token);\n                    continue;\n                }\n                case 'hr': {\n                    out += this.renderer.hr(token);\n                    continue;\n                }\n                case 'heading': {\n                    out += this.renderer.heading(token);\n                    continue;\n                }\n                case 'code': {\n                    out += this.renderer.code(token);\n                    continue;\n                }\n                case 'table': {\n                    out += this.renderer.table(token);\n                    continue;\n                }\n                case 'blockquote': {\n                    out += this.renderer.blockquote(token);\n                    continue;\n                }\n                case 'list': {\n                    out += this.renderer.list(token);\n                    continue;\n                }\n                case 'html': {\n                    out += this.renderer.html(token);\n                    continue;\n                }\n                case 'paragraph': {\n                    out += this.renderer.paragraph(token);\n                    continue;\n                }\n                case 'text': {\n                    let textToken = token;\n                    let body = this.renderer.text(textToken);\n                    while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n                        textToken = tokens[++i];\n                        body += '\\n' + this.renderer.text(textToken);\n                    }\n                    if (top) {\n                        out += this.renderer.paragraph({\n                            type: 'paragraph',\n                            raw: body,\n                            text: body,\n                            tokens: [{ type: 'text', raw: body, text: body, escaped: true }],\n                        });\n                    }\n                    else {\n                        out += body;\n                    }\n                    continue;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n    parseInline(tokens, renderer = this.renderer) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const anyToken = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions?.renderers?.[anyToken.type]) {\n                const ret = this.options.extensions.renderers[anyToken.type].call({ parser: this }, anyToken);\n                if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(anyToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            const token = anyToken;\n            switch (token.type) {\n                case 'escape': {\n                    out += renderer.text(token);\n                    break;\n                }\n                case 'html': {\n                    out += renderer.html(token);\n                    break;\n                }\n                case 'link': {\n                    out += renderer.link(token);\n                    break;\n                }\n                case 'image': {\n                    out += renderer.image(token);\n                    break;\n                }\n                case 'strong': {\n                    out += renderer.strong(token);\n                    break;\n                }\n                case 'em': {\n                    out += renderer.em(token);\n                    break;\n                }\n                case 'codespan': {\n                    out += renderer.codespan(token);\n                    break;\n                }\n                case 'br': {\n                    out += renderer.br(token);\n                    break;\n                }\n                case 'del': {\n                    out += renderer.del(token);\n                    break;\n                }\n                case 'text': {\n                    out += renderer.text(token);\n                    break;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n}\n\nclass _Hooks {\n    options;\n    block;\n    constructor(options) {\n        this.options = options || exports.defaults;\n    }\n    static passThroughHooks = new Set([\n        'preprocess',\n        'postprocess',\n        'processAllTokens',\n    ]);\n    /**\n     * Process markdown before marked\n     */\n    preprocess(markdown) {\n        return markdown;\n    }\n    /**\n     * Process HTML after marked is finished\n     */\n    postprocess(html) {\n        return html;\n    }\n    /**\n     * Process all tokens before walk tokens\n     */\n    processAllTokens(tokens) {\n        return tokens;\n    }\n    /**\n     * Provide function to tokenize markdown\n     */\n    provideLexer() {\n        return this.block ? _Lexer.lex : _Lexer.lexInline;\n    }\n    /**\n     * Provide function to parse tokens\n     */\n    provideParser() {\n        return this.block ? _Parser.parse : _Parser.parseInline;\n    }\n}\n\nclass Marked {\n    defaults = _getDefaults();\n    options = this.setOptions;\n    parse = this.parseMarkdown(true);\n    parseInline = this.parseMarkdown(false);\n    Parser = _Parser;\n    Renderer = _Renderer;\n    TextRenderer = _TextRenderer;\n    Lexer = _Lexer;\n    Tokenizer = _Tokenizer;\n    Hooks = _Hooks;\n    constructor(...args) {\n        this.use(...args);\n    }\n    /**\n     * Run callback for every token\n     */\n    walkTokens(tokens, callback) {\n        let values = [];\n        for (const token of tokens) {\n            values = values.concat(callback.call(this, token));\n            switch (token.type) {\n                case 'table': {\n                    const tableToken = token;\n                    for (const cell of tableToken.header) {\n                        values = values.concat(this.walkTokens(cell.tokens, callback));\n                    }\n                    for (const row of tableToken.rows) {\n                        for (const cell of row) {\n                            values = values.concat(this.walkTokens(cell.tokens, callback));\n                        }\n                    }\n                    break;\n                }\n                case 'list': {\n                    const listToken = token;\n                    values = values.concat(this.walkTokens(listToken.items, callback));\n                    break;\n                }\n                default: {\n                    const genericToken = token;\n                    if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n                        this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n                            const tokens = genericToken[childTokens].flat(Infinity);\n                            values = values.concat(this.walkTokens(tokens, callback));\n                        });\n                    }\n                    else if (genericToken.tokens) {\n                        values = values.concat(this.walkTokens(genericToken.tokens, callback));\n                    }\n                }\n            }\n        }\n        return values;\n    }\n    use(...args) {\n        const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n        args.forEach((pack) => {\n            // copy options to new object\n            const opts = { ...pack };\n            // set async to true if it was set to true before\n            opts.async = this.defaults.async || opts.async || false;\n            // ==-- Parse \"addon\" extensions --== //\n            if (pack.extensions) {\n                pack.extensions.forEach((ext) => {\n                    if (!ext.name) {\n                        throw new Error('extension name required');\n                    }\n                    if ('renderer' in ext) { // Renderer extensions\n                        const prevRenderer = extensions.renderers[ext.name];\n                        if (prevRenderer) {\n                            // Replace extension with func to run new extension but fall back if false\n                            extensions.renderers[ext.name] = function (...args) {\n                                let ret = ext.renderer.apply(this, args);\n                                if (ret === false) {\n                                    ret = prevRenderer.apply(this, args);\n                                }\n                                return ret;\n                            };\n                        }\n                        else {\n                            extensions.renderers[ext.name] = ext.renderer;\n                        }\n                    }\n                    if ('tokenizer' in ext) { // Tokenizer Extensions\n                        if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n                            throw new Error(\"extension level must be 'block' or 'inline'\");\n                        }\n                        const extLevel = extensions[ext.level];\n                        if (extLevel) {\n                            extLevel.unshift(ext.tokenizer);\n                        }\n                        else {\n                            extensions[ext.level] = [ext.tokenizer];\n                        }\n                        if (ext.start) { // Function to check for start of token\n                            if (ext.level === 'block') {\n                                if (extensions.startBlock) {\n                                    extensions.startBlock.push(ext.start);\n                                }\n                                else {\n                                    extensions.startBlock = [ext.start];\n                                }\n                            }\n                            else if (ext.level === 'inline') {\n                                if (extensions.startInline) {\n                                    extensions.startInline.push(ext.start);\n                                }\n                                else {\n                                    extensions.startInline = [ext.start];\n                                }\n                            }\n                        }\n                    }\n                    if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n                        extensions.childTokens[ext.name] = ext.childTokens;\n                    }\n                });\n                opts.extensions = extensions;\n            }\n            // ==-- Parse \"overwrite\" extensions --== //\n            if (pack.renderer) {\n                const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n                for (const prop in pack.renderer) {\n                    if (!(prop in renderer)) {\n                        throw new Error(`renderer '${prop}' does not exist`);\n                    }\n                    if (['options', 'parser'].includes(prop)) {\n                        // ignore options property\n                        continue;\n                    }\n                    const rendererProp = prop;\n                    const rendererFunc = pack.renderer[rendererProp];\n                    const prevRenderer = renderer[rendererProp];\n                    // Replace renderer with func to run extension, but fall back if false\n                    renderer[rendererProp] = (...args) => {\n                        let ret = rendererFunc.apply(renderer, args);\n                        if (ret === false) {\n                            ret = prevRenderer.apply(renderer, args);\n                        }\n                        return ret || '';\n                    };\n                }\n                opts.renderer = renderer;\n            }\n            if (pack.tokenizer) {\n                const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n                for (const prop in pack.tokenizer) {\n                    if (!(prop in tokenizer)) {\n                        throw new Error(`tokenizer '${prop}' does not exist`);\n                    }\n                    if (['options', 'rules', 'lexer'].includes(prop)) {\n                        // ignore options, rules, and lexer properties\n                        continue;\n                    }\n                    const tokenizerProp = prop;\n                    const tokenizerFunc = pack.tokenizer[tokenizerProp];\n                    const prevTokenizer = tokenizer[tokenizerProp];\n                    // Replace tokenizer with func to run extension, but fall back if false\n                    // @ts-expect-error cannot type tokenizer function dynamically\n                    tokenizer[tokenizerProp] = (...args) => {\n                        let ret = tokenizerFunc.apply(tokenizer, args);\n                        if (ret === false) {\n                            ret = prevTokenizer.apply(tokenizer, args);\n                        }\n                        return ret;\n                    };\n                }\n                opts.tokenizer = tokenizer;\n            }\n            // ==-- Parse Hooks extensions --== //\n            if (pack.hooks) {\n                const hooks = this.defaults.hooks || new _Hooks();\n                for (const prop in pack.hooks) {\n                    if (!(prop in hooks)) {\n                        throw new Error(`hook '${prop}' does not exist`);\n                    }\n                    if (['options', 'block'].includes(prop)) {\n                        // ignore options and block properties\n                        continue;\n                    }\n                    const hooksProp = prop;\n                    const hooksFunc = pack.hooks[hooksProp];\n                    const prevHook = hooks[hooksProp];\n                    if (_Hooks.passThroughHooks.has(prop)) {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (arg) => {\n                            if (this.defaults.async) {\n                                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                                    return prevHook.call(hooks, ret);\n                                });\n                            }\n                            const ret = hooksFunc.call(hooks, arg);\n                            return prevHook.call(hooks, ret);\n                        };\n                    }\n                    else {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (...args) => {\n                            let ret = hooksFunc.apply(hooks, args);\n                            if (ret === false) {\n                                ret = prevHook.apply(hooks, args);\n                            }\n                            return ret;\n                        };\n                    }\n                }\n                opts.hooks = hooks;\n            }\n            // ==-- Parse WalkTokens extensions --== //\n            if (pack.walkTokens) {\n                const walkTokens = this.defaults.walkTokens;\n                const packWalktokens = pack.walkTokens;\n                opts.walkTokens = function (token) {\n                    let values = [];\n                    values.push(packWalktokens.call(this, token));\n                    if (walkTokens) {\n                        values = values.concat(walkTokens.call(this, token));\n                    }\n                    return values;\n                };\n            }\n            this.defaults = { ...this.defaults, ...opts };\n        });\n        return this;\n    }\n    setOptions(opt) {\n        this.defaults = { ...this.defaults, ...opt };\n        return this;\n    }\n    lexer(src, options) {\n        return _Lexer.lex(src, options ?? this.defaults);\n    }\n    parser(tokens, options) {\n        return _Parser.parse(tokens, options ?? this.defaults);\n    }\n    parseMarkdown(blockType) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const parse = (src, options) => {\n            const origOpt = { ...options };\n            const opt = { ...this.defaults, ...origOpt };\n            const throwError = this.onError(!!opt.silent, !!opt.async);\n            // throw error if an extension set async to true but parse was called with async: false\n            if (this.defaults.async === true && origOpt.async === false) {\n                return throwError(new Error('marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise.'));\n            }\n            // throw error in case of non string input\n            if (typeof src === 'undefined' || src === null) {\n                return throwError(new Error('marked(): input parameter is undefined or null'));\n            }\n            if (typeof src !== 'string') {\n                return throwError(new Error('marked(): input parameter is of type '\n                    + Object.prototype.toString.call(src) + ', string expected'));\n            }\n            if (opt.hooks) {\n                opt.hooks.options = opt;\n                opt.hooks.block = blockType;\n            }\n            const lexer = opt.hooks ? opt.hooks.provideLexer() : (blockType ? _Lexer.lex : _Lexer.lexInline);\n            const parser = opt.hooks ? opt.hooks.provideParser() : (blockType ? _Parser.parse : _Parser.parseInline);\n            if (opt.async) {\n                return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n                    .then(src => lexer(src, opt))\n                    .then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens)\n                    .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n                    .then(tokens => parser(tokens, opt))\n                    .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n                    .catch(throwError);\n            }\n            try {\n                if (opt.hooks) {\n                    src = opt.hooks.preprocess(src);\n                }\n                let tokens = lexer(src, opt);\n                if (opt.hooks) {\n                    tokens = opt.hooks.processAllTokens(tokens);\n                }\n                if (opt.walkTokens) {\n                    this.walkTokens(tokens, opt.walkTokens);\n                }\n                let html = parser(tokens, opt);\n                if (opt.hooks) {\n                    html = opt.hooks.postprocess(html);\n                }\n                return html;\n            }\n            catch (e) {\n                return throwError(e);\n            }\n        };\n        return parse;\n    }\n    onError(silent, async) {\n        return (e) => {\n            e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n            if (silent) {\n                const msg = '<p>An error occurred:</p><pre>'\n                    + escape(e.message + '', true)\n                    + '</pre>';\n                if (async) {\n                    return Promise.resolve(msg);\n                }\n                return msg;\n            }\n            if (async) {\n                return Promise.reject(e);\n            }\n            throw e;\n        };\n    }\n}\n\nconst markedInstance = new Marked();\nfunction marked(src, opt) {\n    return markedInstance.parse(src, opt);\n}\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\n    marked.setOptions = function (options) {\n        markedInstance.setOptions(options);\n        marked.defaults = markedInstance.defaults;\n        changeDefaults(marked.defaults);\n        return marked;\n    };\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\nmarked.defaults = exports.defaults;\n/**\n * Use Extension\n */\nmarked.use = function (...args) {\n    markedInstance.use(...args);\n    marked.defaults = markedInstance.defaults;\n    changeDefaults(marked.defaults);\n    return marked;\n};\n/**\n * Run callback for every token\n */\nmarked.walkTokens = function (tokens, callback) {\n    return markedInstance.walkTokens(tokens, callback);\n};\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = _Parser.parse;\nconst lexer = _Lexer.lex;\n\nexports.Hooks = _Hooks;\nexports.Lexer = _Lexer;\nexports.Marked = Marked;\nexports.Parser = _Parser;\nexports.Renderer = _Renderer;\nexports.TextRenderer = _TextRenderer;\nexports.Tokenizer = _Tokenizer;\nexports.getDefaults = _getDefaults;\nexports.lexer = lexer;\nexports.marked = marked;\nexports.options = options;\nexports.parse = parse;\nexports.parseInline = parseInline;\nexports.parser = parser;\nexports.setOptions = setOptions;\nexports.use = use;\nexports.walkTokens = walkTokens;\n//# sourceMappingURL=marked.cjs.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","_getDefaults","async","breaks","extensions","gfm","hooks","pedantic","renderer","silent","tokenizer","walkTokens","edit","regex","opt","source","obj","replace","name","val","valSource","other","caret","getRegex","RegExp","escape","html","encode","escapeTest","test","escapeReplace","getEscapeReplacement","escapeTestNoEncode","escapeReplaceNoEncode","cleanUrl","href","encodeURI","percentDecode","splitCells","tableRow","count","cells","row","findPipe","match","offset","str","escaped","curr","split","splitPipe","i","trim","shift","length","at","pop","splice","push","slashPipe","rtrim","c","invert","l","suffLen","charAt","currChar","slice","outputLink","cap","link","raw","lexer","rules","title","text","outputLinkReplace","state","inLink","token","type","tokens","inlineTokens","indentCodeCompensation","matchIndentToCode","indentToCode","map","node","matchIndentInNode","beginningSpace","indentInNode","join","marked","src","markedInstance","parse","defaults","noopTest","exec","codeRemoveIndent","endingHash","startingSpaceChar","endingSpaceChar","nonSpaceChar","newLineCharGlobal","tabCharGlobal","multipleSpaceGlobal","blankLine","doubleBlankLine","blockquoteStart","blockquoteSetextReplace","blockquoteSetextReplace2","listReplaceTabs","listReplaceNesting","listIsTask","listReplaceTask","anyLine","hrefBrackets","tableDelimiter","tableAlignChars","tableRowBlankLine","tableAlignRight","tableAlignCenter","tableAlignLeft","startATag","endATag","startPreScriptTag","endPreScriptTag","startAngleBracket","endAngleBracket","pedanticHrefTitle","unicodeAlphaNumeric","unescapeTest","carriageReturn","spaceLine","notSpaceStart","endingNewline","listItemRegex","bull","nextBulletRegex","indent","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","htmlBeginRegex","hr","bullet","lheadingCore","lheading","lheadingGfm","_paragraph","_blockLabel","def","list","_comment","_tag","paragraph","blockNormal","blockquote","code","blockCode","fences","heading","newline","table","blockText","gfmTable","blockGfm","blockPedantic","br","_punctuation","_punctuationOrSpace","_notPunctuationOrSpace","punctuation","_punctuationGfmStrongEm","emStrongLDelimCore","emStrongLDelim","emStrongLDelimGfm","emStrongRDelimAst","emStrongRDelimAstCore","emStrongRDelimAstGfm","_notPunctuationOrSpaceGfmStrongEm","_punctuationOrSpaceGfmStrongEm","emStrongRDelimUnd","anyPunctuation","autolink","_inlineComment","tag","_inlineLabel","reflink","nolink","reflinkSearch","inlineNormal","_backpedal","blockSkip","inlineCode","del","escape$1","inlineText","url","inlinePedantic","inlineGfm","inlineBreaks","block","normal","inline","escapeReplacements","ch","_Tokenizer","constructor","options","space","codeBlockStyle","lang","trimmed","depth","lines","inBlockquote","currentLines","currentRaw","currentText","top","blockTokens","lastToken","newText","oldToken","newToken","substring","isordered","ordered","start","loose","items","itemRegex","endsWithBlankLine","endEarly","itemContents","line","t","repeat","nextLine","trimStart","search","rawLine","nextLineWithoutTabs","istask","ischecked","task","checked","lastItem","trimEnd","spacers","filter","hasMultipleLineBreaks","some","pre","toLowerCase","headers","aligns","rows","item","header","align","cell","inRawBlock","trimmedUrl","rtrimSlash","indexOf","level","lastParenIndex","linkLen","links","linkString","emStrong","maskedSrc","prevChar","lLength","rDelim","delimTotal","midDelimTotal","endReg","lastIndex","rLength","lastCharLength","index","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","prevCapZero","_Lexer","Object","create","inlineQueue","lex","lexInline","next","lastParagraphClipped","extTokenizer","call","undefined","cutSrc","startBlock","startIndex","Infinity","tempSrc","tempStart","forEach","getStartIndex","errMsg","charCodeAt","console","error","Error","keys","includes","lastIndexOf","keepPrevChar","startInline","_Renderer","langString","parser","body","parseInline","j","listitem","startAttr","itemBody","checkbox","unshift","tablecell","tablerow","k","content","strong","em","cleanHref","out","image","_TextRenderer","_Parser","textRenderer","anyToken","renderers","genericToken","ret","textToken","_Hooks","Set","preprocess","markdown","postprocess","processAllTokens","provideLexer","provideParser","Marked","args","setOptions","parseMarkdown","use","callback","values","concat","tableToken","childTokens","flat","pack","opts","ext","prevRenderer","apply","extLevel","prop","rendererProp","rendererFunc","tokenizerProp","tokenizerFunc","prevTokenizer","hooksProp","hooksFunc","prevHook","passThroughHooks","has","arg","Promise","resolve","then","packWalktokens","opts.walkTokens","blockType","origOpt","throwError","onError","prototype","toString","all","catch","e","message","msg","reject","marked.setOptions","getDefaults","marked.use","marked.walkTokens","Parser","Renderer","TextRenderer","Lexer","Tokenizer","Hooks"]
}
